package cn.zwz.xboot.modules.assessment.controller;

import cn.zwz.xboot.common.utils.PageUtil;
import cn.zwz.xboot.common.utils.ResultUtil;
import cn.zwz.xboot.common.vo.PageVo;
import cn.zwz.xboot.common.vo.Result;
import cn.zwz.xboot.modules.assessment.entity.AssessmentLine;
import cn.zwz.xboot.modules.assessment.entity.AssessmentLineItem;
import cn.zwz.xboot.modules.assessment.entity.TwoWindows;
import cn.zwz.xboot.modules.assessment.entity.Village;
import cn.zwz.xboot.modules.assessment.service.IAssessmentLineItemService;
import cn.zwz.xboot.modules.assessment.service.IAssessmentLineService;
import cn.zwz.xboot.modules.assessment.service.ITwoWindowsService;
import cn.hutool.core.util.StrUtil;
import cn.zwz.xboot.modules.assessment.service.IVillageService;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * @author 郑为中
 */
@Slf4j
@RestController
@Api(description = "二级页面管理接口")
@RequestMapping("/xboot/twoWindows")
@Transactional
public class TwoWindowsController {

    @Autowired
    private ITwoWindowsService iTwoWindowsService;

    @Autowired
    private IAssessmentLineService iAssessmentLineService;

    @Autowired
    private IAssessmentLineItemService iAssessmentLineItemService;

    @Autowired
    private IVillageService iVillageService;


    @RequestMapping(value = "/init", method = RequestMethod.GET)
    @ApiOperation(value = "获取全部数据")
    public Result<List<TwoWindows>> init(){
        String timeId = "1376067966306750464";
        List<AssessmentLine> lineList = iAssessmentLineService.list();
        for (AssessmentLine line : lineList) {
            QueryWrapper<AssessmentLineItem> qww = new QueryWrapper<>();
            qww.eq("line_id",line.getId());
            qww.orderByAsc("sort_level");
            List<AssessmentLineItem> itemList = iAssessmentLineItemService.list(qww);
            TwoWindows title = new TwoWindows();
            if(itemList.size() > 0) title.setB(itemList.get(0).getItemTitle());
            if(itemList.size() > 1) title.setD(itemList.get(1).getItemTitle());
            if(itemList.size() > 2) title.setF(itemList.get(2).getItemTitle());
            if(itemList.size() > 3) title.setH(itemList.get(3).getItemTitle());
            if(itemList.size() > 4) title.setJ(itemList.get(4).getItemTitle());
            if(itemList.size() > 5) title.setL(itemList.get(5).getItemTitle());
            if(itemList.size() > 6) title.setN(itemList.get(6).getItemTitle());
            if(itemList.size() > 7) title.setP(itemList.get(7).getItemTitle());
            if(itemList.size() > 8) title.setR(itemList.get(8).getItemTitle());
            if(itemList.size() > 9) title.setT(itemList.get(9).getItemTitle());
            if(itemList.size() > 10) title.setV(itemList.get(10).getItemTitle());
            if(itemList.size() > 11) title.setX(itemList.get(11).getItemTitle());
            if(itemList.size() > 12) title.setZ(itemList.get(12).getItemTitle());
            if(itemList.size() > 13) title.setAb(itemList.get(13).getItemTitle());
            if(itemList.size() > 14) title.setAd(itemList.get(14).getItemTitle());
            if(itemList.size() > 15) title.setAf(itemList.get(15).getItemTitle());
            if(itemList.size() > 16) title.setAh(itemList.get(16).getItemTitle());
            if(itemList.size() > 17) title.setAj(itemList.get(17).getItemTitle());
            if(itemList.size() > 18) title.setAl(itemList.get(18).getItemTitle());
            if(itemList.size() > 19) title.setAn(itemList.get(19).getItemTitle());
            if(itemList.size() > 20) title.setAp(itemList.get(20).getItemTitle());
            if(itemList.size() > 21) title.setAr(itemList.get(21).getItemTitle());
            if(itemList.size() > 22) title.setAt(itemList.get(22).getItemTitle());
            if(itemList.size() > 23) title.setAv(itemList.get(23).getItemTitle());
            title.setA("");
            title.setLineId(line.getId());
            title.setTimeId(timeId);
            iTwoWindowsService.saveOrUpdate(title);
            List<Village> villageList = iVillageService.list();
            for (Village village : villageList) {
                TwoWindows item = new TwoWindows();
                item.setA(village.getVillageName());
                item.setB("");
                item.setC("");
                item.setD("");
                item.setE("");
                item.setF("");
                item.setG("");
                item.setH("");
                item.setI("");
                item.setJ("");
                item.setK("");
                item.setL("");
                item.setM("");
                item.setN("");
                item.setO("");
                item.setP("");
                item.setQ("");
                item.setR("");
                item.setS("");
                item.setT("");
                item.setU("");
                item.setV("");
                item.setW("");
                item.setX("");
                item.setY("");
                item.setZ("");
                item.setAa("");
                item.setAb("");
                item.setAc("");
                item.setAd("");
                item.setAe("");
                item.setAf("");
                item.setAg("");
                item.setAh("");
                item.setAi("");
                item.setAj("");
                item.setAk("");
                item.setAl("");
                item.setAm("");
                item.setAn("");
                item.setAo("");
                item.setAp("");
                item.setAq("");
                item.setAr("");
                item.setAss("");
                item.setAt("");
                item.setAu("");
                item.setAv("");
                item.setAw("");
                item.setLineId(line.getId());
                item.setTimeId(timeId);
                iTwoWindowsService.saveOrUpdate(item);
            }
        }
        return new ResultUtil<List<TwoWindows>>().setSuccessMsg("OK");
    }

    @RequestMapping(value = "/get/{id}", method = RequestMethod.GET)
    @ApiOperation(value = "通过id获取")
    public Result<TwoWindows> get(@PathVariable String id){

        TwoWindows twoWindows = iTwoWindowsService.getById(id);
        return new ResultUtil<TwoWindows>().setData(twoWindows);
    }

    @RequestMapping(value = "/getAll", method = RequestMethod.GET)
    @ApiOperation(value = "获取全部数据")
    public Result<List<TwoWindows>> getAll(@RequestParam String lineId,@RequestParam String timeId){
        QueryWrapper<TwoWindows> qw = new QueryWrapper<>();
        qw.eq("line_id",lineId);
        qw.eq("time_id",timeId);
        List<TwoWindows> list = iTwoWindowsService.list(qw);
        return new ResultUtil<List<TwoWindows>>().setData(list);
    }


    @RequestMapping(value = "/getByPage", method = RequestMethod.GET)
    @ApiOperation(value = "分页获取")
    public Result<IPage<TwoWindows>> getByPage(PageVo page){

        IPage<TwoWindows> data = iTwoWindowsService.page(PageUtil.initMpPage(page));
        return new ResultUtil<IPage<TwoWindows>>().setData(data);
    }

    @RequestMapping(value = "/insertOrUpdate", method = RequestMethod.POST)
    @ApiOperation(value = "编辑或更新数据")
    public Result<TwoWindows> saveOrUpdate(TwoWindows twoWindows){

        if(iTwoWindowsService.saveOrUpdate(twoWindows)){
            return new ResultUtil<TwoWindows>().setData(twoWindows);
        }
        return new ResultUtil<TwoWindows>().setErrorMsg("操作失败");
    }

    @RequestMapping(value = "/update", method = RequestMethod.POST)
    @ApiOperation(value = "编辑或更新数据")
    public Result<TwoWindows> update(TwoWindows twoWindows){
        iTwoWindowsService.saveOrUpdate(twoWindows);
        return new ResultUtil<TwoWindows>().setSuccessMsg("OK");
    }

    @RequestMapping(value = "/delByIds", method = RequestMethod.POST)
    @ApiOperation(value = "批量通过id删除")
    public Result<Object> delAllByIds(@RequestParam String[] ids){

        for(String id : ids){
            iTwoWindowsService.removeById(id);
        }
        return ResultUtil.success("批量通过id删除数据成功");
    }
}
